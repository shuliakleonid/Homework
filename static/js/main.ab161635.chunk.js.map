{"version":3,"sources":["p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h10/bll/loadingReducer.ts","p2-homeworks/h10/HW10.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","p2-homeworks/h10/bll/store.ts","index.tsx","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p2-homeworks/h10/HW10.module.css"],"names":["module","exports","SuperButton","red","className","restProps","finalClassName","s","default","initState","loading","HW10","dispatch","useDispatch","useSelector","state","console","log","wrapper","loader","onClick","setTimeout","type","payload","loadingAC","App","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,IAAM,mB,qLCwBTC,EAhBqC,SAAC,GAK/C,IAHAC,EAGD,EAHCA,IAAKC,EAGN,EAHMA,UACFC,EAEJ,mCACGC,EAAc,UAAMH,EAAMI,IAAEJ,IAAMI,IAAEC,QAAtB,YAAiCJ,GAErD,OACI,0CACIA,UAAWE,GACPD,K,cChBRI,EAAY,CAChBC,SAAS,G,gBC2CIC,MAxCf,WAEE,IAAMC,EAAWC,cACXH,EAAUI,aAAkC,SAAAC,GAAK,OAAIA,EAAML,QAAQA,WAYzE,OAVAM,QAAQC,IAAIP,GAWR,yBAAKN,UAAWG,IAAEW,SAChB,6BAICR,EAEO,yBAAKN,UAAWG,IAAEY,QAAQ,2CAE1B,6BACE,kBAAC,EAAD,CAAaC,QApBV,WAGjBC,YAAW,WACTT,EDGmB,SAACF,GAAD,MAAuB,CAACY,KAAM,cAAeC,QAAS,CAACb,YCHjEc,EAAU,MAClB,KACHR,QAAQC,IAAI,gBAcE,mBAKV,6BAGA,+BCnBOQ,MAnBf,WACE,OACI,yBAAKrB,UAAWG,IAAEkB,KAChB,iDAUA,kBAAC,EAAD,QCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAWC,YAAgB,CAC7BtB,QJI0B,WAA4E,IAA3EK,EAA0E,uDAAlDN,EAAWwB,EAAuC,uCACvG,OAAQA,EAAOX,MACb,IAAK,cAGH,OADAN,QAAQC,IAAR,eAAgBF,EAAhB,GAA0BkB,EAAOV,UAC1B,eAAIR,EAAX,GAAqBkB,EAAOV,SAE9B,QACE,OAAOR,MITPmB,EAAQC,YAAYJ,GAEXG,IAOfP,OAAOO,MAAQA,ECRfE,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SF6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a,kBGhJ5BjD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,kBCA/DD,EAAOC,QAAU,CAAC,QAAU,sBAAsB,OAAS,qBAAqB,YAAc,0BAA0B,OAAS,wB","file":"static/js/main.ab161635.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1lmgv\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './SuperButton.module.css';\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n  red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n      red, className,\r\n      ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n  const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n  return (\r\n      <button\r\n          className={finalClassName}\r\n          {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n      />\r\n  );\r\n}\r\n\r\nexport default SuperButton;\r\n","export type initStateProps = {\r\n  loading: boolean\r\n}\r\n\r\nconst initState = {\r\n  loading: false\r\n};\r\n\r\nexport const loadingReducer = (state: initStateProps = initState, action: ActionType): initStateProps => { // fix any\r\n  switch (action.type) {\r\n    case 'SET_LOADING': {\r\n      debugger\r\n      console.log({...state, ...action.payload})\r\n      return {...state, ...action.payload};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport type ActionType = ReturnType<typeof loadingAC>\r\nexport const loadingAC = (loading: boolean) => ({type: 'SET_LOADING', payload: {loading}}) as const\r\n","import React from 'react';\r\nimport {Dispatch} from 'redux'\r\nimport SuperButton from '../h4/common/c2-SuperButton/SuperButton';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from './bll/store';\r\nimport {ActionType, loadingAC} from './bll/loadingReducer';\r\nimport s from './HW10.module.css'\r\n\r\nfunction HW10() {\r\n  // useSelector, useDispatch\r\n  const dispatch = useDispatch<Dispatch<ActionType>>()\r\n  const loading = useSelector<AppStoreType,boolean>(state => state.loading.loading)\r\n  // const loading = false;\r\n  console.log(loading)\r\n  const setLoading = () => {\r\n    // dispatch\r\n    // setTimeout\r\n    setTimeout(() => {\r\n      dispatch(loadingAC(true))\r\n    }, 2000)\r\n    console.log('loading...');\r\n  };\r\n\r\n  return (\r\n      <div className={s.wrapper}>\r\n        <hr/>\r\n        {/*homeworks 10*/}\r\n\r\n        {/*should work (должно работать)*/}\r\n        {loading\r\n            ? (\r\n                <div className={s.loader}><h2>Loading...</h2></div>\r\n            ) : (\r\n                <div>\r\n                  <SuperButton onClick={setLoading}>set loading...</SuperButton>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        <hr/>\r\n        {/*для личного творчества, могу проверить*/}\r\n        {/*<Alternative/>*/}\r\n        <hr/>\r\n      </div>\r\n  );\r\n}\r\n\r\n\r\nexport default HW10;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport HW10 from '../../../p2-homeworks/h10/HW10';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className={s.App}>\r\n        <div>react homeworks:</div>\r\n        {/*<HW1/>*/}\r\n        {/*<HW2/>*/}\r\n        {/*<HW3/>*/}\r\n        {/*<HW4/>*/}\r\n        {/*<HW5/>*/}\r\n        {/*<HW6/>*/}\r\n        {/*<HW7/>*/}\r\n        {/*<HW8/>*/}\r\n        {/*<HW9/>*/}\r\n        <HW10/>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {loadingReducer} from \"./loadingReducer\";\r\nimport { combineReducers, createStore } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n    loading: loadingReducer,\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// export const selectCurrencyState = (state: AppStoreType) => state.loading\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './p1-main/m1-ui/u1-app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './p2-homeworks/h10/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__3OtDX\",\"red\":\"SuperButton_red__193th\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"HW10_wrapper__29lsw\",\"loader\":\"HW10_loader__3zuK5\",\"blinkCursor\":\"HW10_blinkCursor__3-gi2\",\"typing\":\"HW10_typing__3R-c1\"};"],"sourceRoot":""}