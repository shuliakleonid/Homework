{"version":3,"sources":["p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h12/bll/themeReducer.ts","p2-homeworks/h7/common/c5-SuperSelect/SuperSelect.tsx","p2-homeworks/h7/common/c6-SuperRadio/SuperRadio.tsx","p2-homeworks/h12/HW12.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","p2-homeworks/h10/bll/loadingReducer.ts","p2-homeworks/h10/bll/store.ts","index.tsx","p2-homeworks/h12/HW12.module.css"],"names":["module","exports","changeThemeC","theme","type","SuperSelect","options","restProps","onChange","onChangeOption","useSelector","state","dispatch","useDispatch","mappedOptions","map","option","index","key","value","selected","e","currentTarget","SuperRadio","name","o","i","themes","HW12","className","s","App","Boolean","window","location","hostname","match","initState","loading","reducers","combineReducers","action","payload","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0HACAA,EAAOC,QAAU,CAAC,IAAM,mB,oLCcXC,EAAe,SAACC,GAAD,MAAoB,CAACC,KAAM,eAAgBD,U,OCqBxDE,EAxBqC,SAAC,GAM/C,IAJEC,EAIH,EAJGA,QAEGC,GAEN,EAHGC,SAGH,EAHaC,eAGb,wDACGN,EAAQO,aAAiC,SAAAC,GAAK,OAAIA,EAAMR,SACxDS,EAAUC,cACRC,EAAgBR,GAAWA,EAAQS,KAAI,SAACC,EAAOC,GAAR,OAAiB,4BAAQC,IAAKD,EAAOE,MAAOH,EAAQI,SAAUJ,IAAWb,GAAQa,MAQ9H,OACI,0CAAQR,SANa,SAACa,GACxBT,EAASV,EAAamB,EAAEC,cAAcH,UAKIZ,GACnCO,ICiBES,EApCmC,SAAC,GAO9C,EALCnB,KAKD,EALOoB,KAKN,IAJAlB,EAID,EAJCA,QAaEQ,GATH,EAJUK,MAIV,EAHCX,SAGD,EAHWC,eAGX,6EACWC,aAAkC,SAAAC,GAAK,OAAIA,EAAMR,SAC9CU,cAOoBP,EAAUA,EAAQS,KAAI,SAACU,EAAGC,OAW1D,IAEL,OACI,oCACGZ,ICpCHa,EAAkB,CAAC,OAAQ,MAAO,QAsBzBC,MApBf,WACA,IAAMzB,EAAQO,aAAiC,SAAAC,GAAK,OAAIA,EAAMR,SAG1D,OACI,yBAAK0B,UAAWC,IAAE3B,IACd,6BACA,0BAAM0B,UAAWC,IAAE3B,EAAQ,UAA3B,gBAGF,kBAAC,EAAD,CAAaG,QAASqB,IACtB,kBAAC,EAAD,CAAYrB,QAASqB,IAInB,+BCCGI,MArBf,WACE,OACI,yBAAKF,UAAWC,IAAEC,KAChB,iDAYA,kBAAC,EAAD,QCPYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCdAC,EAAY,CAChBC,SAAS,G,OCDLC,EAAWC,YAAgB,CAC/BF,QDG4B,WAA4E,IAA3E3B,EAA0E,uDAAlD0B,EAAWI,EAAuC,uCACvG,OAAQA,EAAOrC,MACb,IAAK,cAEH,OAAO,eAAIO,EAAX,GAAqB8B,EAAOC,SAE9B,QACE,OAAO/B,ICTXR,MPJ0B,WAAoD,IAAnDQ,EAAkD,uDAFtD,OAEuB8B,EAA+B,uCAC7E,OAAQA,EAAOrC,MACb,IAAK,eACH,OAAOqC,EAAOtC,MAEhB,QACE,OAAOQ,MOCPgC,EAAQC,YAAYL,GAEXI,IAOfV,OAAOU,MAAQA,ECVfE,IAASC,OACL,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SH6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBIhJ5B3D,EAAOC,QAAU,CAAC,KAAO,mBAAmB,YAAY,wBAAwB,IAAM,kBAAkB,WAAW,uBAAuB,KAAO,mBAAmB,YAAY,2B","file":"static/js/main.8d8f2914.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1lmgv\"};","const initState:string = 'dark';\r\n\r\nexport const themeReducer = (state = initState, action: ActionType): string => { // fix any\r\n  switch (action.type) {\r\n    case 'CHANGE_THEME': {\r\n      return action.theme;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\ntype ActionType = ReturnType<typeof changeThemeC>\r\n\r\n\r\nexport const changeThemeC = (theme: string) => ({type: 'CHANGE_THEME', theme}) as const  // fix any\r\n","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\r\nimport {changeThemeC} from '../../../h12/bll/themeReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../../../h10/bll/store';\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: string[]\r\n    onChangeOption?: (option: string) => void\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n  const theme = useSelector<AppStoreType,string>(state => state.theme)\r\n  const dispatch =useDispatch()\r\n    const mappedOptions = options && options.map((option,index)=> <option key={index} value={option} selected={option === theme}>{option}</option>)\r\n  // map options with key\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n      dispatch(changeThemeC(e.currentTarget.value))\r\n        // onChange, onChangeOption\r\n    }\r\n\r\n    return (\r\n        <select onChange={onChangeCallback} {...restProps}>\r\n            {mappedOptions}\r\n        </select>\r\n    );\r\n}\r\n\r\nexport default SuperSelect;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {changeThemeC} from '../../../h12/bll/themeReducer';\r\nimport {AppStoreType} from '../../../h10/bll/store';\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n  options?: string[]\r\n  onChangeOption?: (option: string) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n      type, name,\r\n      options, value,\r\n      onChange, onChangeOption,\r\n      ...restProps\r\n    }\r\n) => {\r\n  const theme = useSelector<AppStoreType, string>(state => state.theme)\r\n  const dispatch = useDispatch()\r\n  const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n    dispatch(changeThemeC(e.currentTarget.name))\r\n    // onChange, onChangeOption\r\n  }\r\n\r\n\r\n  const mappedOptions: JSX.Element[] = options ? options.map((o, i) => ( // map options with key\r\n      <label key={name + '-' + i}>\r\n        <input\r\n            type={'radio'}\r\n            name={o}\r\n            onChange={onChangeCallback}\r\n            checked={o === theme}\r\n            // name, checked, value, onChange\r\n        />\r\n        {o}\r\n      </label>\r\n  )) : [];\r\n\r\n  return (\r\n      <>\r\n        {mappedOptions}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default SuperRadio;\r\n","import React from \"react\";\r\nimport s from \"./HW12.module.css\";\r\nimport SuperSelect from '../h7/common/c5-SuperSelect/SuperSelect';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppStoreType} from '../h10/bll/store';\r\nimport SuperRadio from '../h7/common/c6-SuperRadio/SuperRadio';\r\n\r\nconst themes:string[] = ['dark', 'red', 'some'];\r\n\r\nfunction HW12() {\r\nconst theme = useSelector<AppStoreType,string>(state => state.theme)\r\n    // useDispatch, onChangeCallback\r\n\r\n    return (\r\n        <div className={s[theme]}>\r\n            <hr/>\r\n            <span className={s[theme + '-text']}>\r\n                homeworks 12\r\n            </span>\r\n          <SuperSelect options={themes}/>\r\n          <SuperRadio options={themes} />\r\n            {/*should work (должно работать)*/}\r\n            {/*SuperSelect or SuperRadio*/}\r\n\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW12;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport HW12 from '../../../p2-homeworks/h12/HW12';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className={s.App}>\r\n        <div>react homeworks:</div>\r\n        {/*<HW1/>*/}\r\n        {/*<HW2/>*/}\r\n        {/*<HW3/>*/}\r\n        {/*<HW4/>*/}\r\n        {/*<HW5/>*/}\r\n        {/*<HW6/>*/}\r\n        {/*<HW7/>*/}\r\n        {/*<HW8/>*/}\r\n        {/*<HW9/>*/}\r\n        {/*<HW10/>*/}\r\n        {/*<HW11/>*/}\r\n        <HW12/>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type initStateProps = {\r\n  loading: boolean\r\n}\r\n\r\nconst initState = {\r\n  loading: false\r\n};\r\n\r\nexport const loadingReducer = (state: initStateProps = initState, action: ActionType): initStateProps => { // fix any\r\n  switch (action.type) {\r\n    case 'SET_LOADING': {\r\n      debugger\r\n      return {...state, ...action.payload};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport type ActionType = ReturnType<typeof loadingAC>\r\nexport const loadingAC = (loading: boolean) => ({type: 'SET_LOADING', payload: {loading}}) as const\r\n","import {loadingReducer} from './loadingReducer';\r\nimport {combineReducers, createStore} from 'redux';\r\nimport {themeReducer} from '../../h12/bll/themeReducer';\r\n\r\nconst reducers = combineReducers({\r\n  loading: loadingReducer,\r\n  theme: themeReducer\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// export const selectCurrencyState = (state: AppStoreType) => state.loading\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './p1-main/m1-ui/u1-app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './p2-homeworks/h10/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"HW12_dark__3WXB9\",\"dark-text\":\"HW12_dark-text__3yjfe\",\"red\":\"HW12_red__1l4-8\",\"red-text\":\"HW12_red-text__JB4KL\",\"some\":\"HW12_some__24A0X\",\"some-text\":\"HW12_some-text__33CYh\"};"],"sourceRoot":""}