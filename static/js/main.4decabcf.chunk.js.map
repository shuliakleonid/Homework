{"version":3,"sources":["p2-homeworks/h11/common/c7-SuperRange/SuperRange.module.css","p2-homeworks/h11/common/c7-SuperRange/SuperRange.tsx","p2-homeworks/h11/common/c8-SuperDoubleRange/SuperDoubleRange.tsx","p2-homeworks/h11/HW11.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","p2-homeworks/h10/bll/loadingReducer.ts","p2-homeworks/h10/bll/store.ts","index.tsx","p1-main/m1-ui/u1-app/App.module.css"],"names":["module","exports","SuperRange","type","onChange","onChangeRange","className","restProps","finalRangeClassName","s","range","e","currentTarget","value","SuperDoubleRange","value1","value2","changeVal1","changeVal2","useState","hoverLeft","setHoverLeft","activeLeft","setActiveLeft","hoverRight","setHoverRight","activeRight","setActiveRight","min","max","event","input","target","parseInt","String","Math","percent","onMouseOver","onMouseDown","onMouseOut","onMouseUp","style","left","right","HW11","setValue1","setValue2","val","floor","App","Boolean","window","location","hostname","match","initState","loading","reducers","combineReducers","state","action","console","log","payload","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4decabcf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"range\":\"SuperRange_range__xc12E\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperRange.module.css\";\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype SuperRangePropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeRange?: (value:number) => void\r\n};\r\n\r\nconst SuperRange: React.FC<SuperRangePropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeRange,\r\n        className,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e); // сохраняем старую функциональность\r\n\r\n        onChangeRange && onChangeRange(+e.currentTarget.value);\r\n    }\r\n\r\n    const finalRangeClassName = `${s.range} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"range\"}\r\n                onChange={onChangeCallback}\r\n                className={finalRangeClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperRange;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport './SuperDoubleRange.css'\r\n\r\n\r\ntype SuperDoubleRangePropsType = {\r\n  onChangeRange?: (value: number, val: number) => void\r\n  changeVal1: (val: number) => void\r\n  changeVal2: (val: number) => void\r\n  value1: number\r\n  value2: number\r\n  // min, max, step, disable, ...\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (\r\n    {\r\n      value1, value2, onChangeRange, changeVal1, changeVal2\r\n      // onChangeRange, value,\r\n      // min, max, step, disable, ...\r\n    }\r\n) => {\r\n  // сделать самому, можно подключать библиотеки\r\n  const [hoverLeft, setHoverLeft] = useState('')\r\n  const [activeLeft, setActiveLeft] = useState('')\r\n  const [hoverRight, setHoverRight] = useState('')\r\n  const [activeRight, setActiveRight] = useState('')\r\n  const setLeftValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n    let input = event.target\r\n    const min = parseInt(input.min)\r\n    const max = parseInt(input.max)\r\n\r\n    input.value = String(Math.min(parseInt(input.value), parseInt(String(value2)) - 1))\r\n    let percent = ((parseInt(input.value) - min) / (max - min)) * 100;\r\n    changeVal1(percent)\r\n  }\r\n  const setRightValue = (event: ChangeEvent<HTMLInputElement>) => {\r\n    let input = event.target\r\n    const min: number = parseInt(input.min)\r\n    const max: number = parseInt(input.max)\r\n\r\n    input.value = String(Math.max(parseInt(input.value), parseInt(String(value1)) + 1))\r\n\r\n    let percent: number = ((parseInt(input.value) - min) / (max - min)) * 100;\r\n    changeVal2(percent)\r\n  }\r\n  return (\r\n      <div className='wrapper'>\r\n        <div className=\"middle\">\r\n          <div className=\"multi-range-slider\">\r\n            <input type=\"range\"\r\n                   className={`input inputLeft `}\r\n                   value={value1}\r\n                   min=\"0\"\r\n                   max=\"100\"\r\n                   onChange={setLeftValue}\r\n                   onMouseOver={() => setHoverLeft('hover')}\r\n                   onMouseDown={() => setActiveLeft('active')}\r\n                   onMouseOut={() => setHoverLeft('')}\r\n                   onMouseUp={() => setActiveLeft('')}\r\n            />\r\n            <input type=\"range\"\r\n                   className=\"input inputRight\"\r\n                   value={value2}\r\n                   min=\"0\"\r\n                   max=\"100\"\r\n                   onChange={setRightValue}\r\n                   onMouseOver={() => setHoverRight('hover')}\r\n                   onMouseDown={() => setActiveRight('active')}\r\n                   onMouseOut={() => setHoverRight('')}\r\n                   onMouseUp={() => setActiveRight('')}\r\n            />\r\n            <div className=\"slider\">\r\n              <div className=\"track\"/>\r\n              <div className=\"range\"\r\n                   style={{left: `${value1}%`, right: `${100 - value2}%`}}/>\r\n              <div className={`thumb left ${hoverLeft} ${activeLeft}`}\r\n                   style={{left: `${value1}%`}}/>\r\n              <div className={`thumb right ${hoverRight} ${activeRight}`}\r\n                   style={{right: `${100 - value2}%`}}/>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default SuperDoubleRange;\r\n","import React, {useState} from 'react';\r\nimport SuperRange from './common/c7-SuperRange/SuperRange';\r\nimport SuperDoubleRange from './common/c8-SuperDoubleRange/SuperDoubleRange';\r\n\r\nfunction HW11() {\r\n  const [value1, setValue1] = useState(0);\r\n  const [value2, setValue2] = useState(100);\r\n  const changeVal1 = (val: number) => {\r\n    setValue1(val)\r\n  }\r\n  const changeVal2 = (val: number) => {\r\n    setValue2(val)\r\n  }\r\n\r\n  return (\r\n      <div>\r\n        <hr/>\r\n        homeworks 11\r\n        {/*should work (должно работать)*/}\r\n        <div>\r\n          <span>{Math.floor(value1)}</span>\r\n          <SuperRange\r\n              onChangeRange={changeVal1}\r\n              value={value1}\r\n              // сделать так чтоб value1 изменялось\r\n          />\r\n        </div>\r\n        <div>\r\n          <span>{Math.floor(value1)}</span>\r\n          <SuperDoubleRange\r\n              // onChangeRange={changeRangeVal2}\r\n              value1={value1}\r\n              value2={value2}\r\n              changeVal1={changeVal1}\r\n              changeVal2={changeVal2}\r\n              // сделать так чтоб value1 и value2 изменялось\r\n          />\r\n          <span>{Math.floor(value2)}</span>\r\n        </div>\r\n        <hr/>\r\n        {/*для личного творчества, могу проверить*/}\r\n        {/*<AlternativeSuperRange/>*/}\r\n        {/*<AlternativeSuperDoubleRange/>*/}\r\n        <hr/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default HW11;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport HW11 from '../../../p2-homeworks/h11/HW11';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className={s.App}>\r\n        <div>react homeworks:</div>\r\n        {/*<HW1/>*/}\r\n        {/*<HW2/>*/}\r\n        {/*<HW3/>*/}\r\n        {/*<HW4/>*/}\r\n        {/*<HW5/>*/}\r\n        {/*<HW6/>*/}\r\n        {/*<HW7/>*/}\r\n        {/*<HW8/>*/}\r\n        {/*<HW9/>*/}\r\n        {/*<HW10/>*/}\r\n        <HW11/>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type initStateProps = {\r\n  loading: boolean\r\n}\r\n\r\nconst initState = {\r\n  loading: false\r\n};\r\n\r\nexport const loadingReducer = (state: initStateProps = initState, action: ActionType): initStateProps => { // fix any\r\n  switch (action.type) {\r\n    case 'SET_LOADING': {\r\n      debugger\r\n      console.log({...state, ...action.payload})\r\n      return {...state, ...action.payload};\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport type ActionType = ReturnType<typeof loadingAC>\r\nexport const loadingAC = (loading: boolean) => ({type: 'SET_LOADING', payload: {loading}}) as const\r\n","import {loadingReducer} from \"./loadingReducer\";\r\nimport { combineReducers, createStore } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n    loading: loadingReducer,\r\n});\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store\r\n\r\nexport type AppStoreType = ReturnType<typeof reducers>\r\n\r\n// export const selectCurrencyState = (state: AppStoreType) => state.loading\r\n\r\n// @ts-ignore\r\nwindow.store = store; // for dev\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './p1-main/m1-ui/u1-app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\nimport store from './p2-homeworks/h10/bll/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n      <Provider store={store}>\r\n        <App/>\r\n      </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1lmgv\"};"],"sourceRoot":""}