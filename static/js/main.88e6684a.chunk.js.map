{"version":3,"sources":["p2-homeworks/h7/HW7.module.css","p1-main/m1-ui/u1-app/App.module.css","p2-homeworks/h7/common/c5-SuperSelect/SuperSelect.tsx","p2-homeworks/h7/common/c6-SuperRadio/SuperRadio.tsx","p2-homeworks/h7/HW7.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SuperSelect","options","onChangeOption","onChange","restProps","mappedOptions","map","o","e","currentTarget","value","SuperRadio","type","name","console","log","i","arr","HW7","useState","className","s","root","box","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yHACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,IAAM,mB,kBCAjDD,EAAOC,QAAU,CAAC,IAAM,mB,sKC6BTC,EArBqC,SAAC,GAM/C,IAJAC,EAID,EAJCA,QACUC,GAGX,EAHCC,SAGD,EAHWD,gBACPE,EAEJ,uDACGC,EAAgBJ,EAAQK,KAAI,SAAAC,GAAC,OAAI,gCAASA,MAOhD,OACI,0CAAQJ,SANa,SAACK,GACxBN,EAAeM,EAAEC,cAAcC,SAKWN,GACrCC,ICiBMM,EAjCmC,SAAC,GAO9C,EALCC,KAKD,EALOC,KAKN,IAJAZ,EAID,EAJCA,QAASS,EAIV,EAJUA,MAIV,EAHCP,SAGD,EAHWD,eAGX,6EAKHY,QAAQC,IAAIL,GACZ,IAAML,EAAgBJ,EAAUA,EAAQK,KAAI,SAACC,EAAGS,OAW3C,GAEL,OACI,oCACGX,I,gBChCHY,EAAqB,CAAC,IAAK,IAAK,KAkCvBC,MAhCf,WAAgB,IAAD,EACmBC,mBAAiBF,EAAI,IADxC,mBACNP,EADM,KACCR,EADD,KAEb,OACI,yBAAKkB,UAAWC,IAAEC,MAChB,6BADF,cAIE,yBAAKF,UAAWC,IAAEE,KAChB,kBAAC,EAAD,CACItB,QAASgB,EACTP,MAAOA,EACPR,eAAgBA,KAGtB,6BACE,kBAAC,EAAD,CACIW,KAAM,QACNZ,QAASgB,EACTP,MAAOA,EACPR,eAAgBA,OCPfsB,MAff,WACE,OACI,yBAAKJ,UAAWC,IAAEG,KAChB,iDAOA,kBAAC,EAAD,QCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.88e6684a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"HW7_root__2HV3y\",\"box\":\"HW7_box__md--3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1Ck26\"};","import React, {ChangeEvent, DetailedHTMLProps, SelectHTMLAttributes} from 'react';\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n  options: Array<string>\r\n  onChangeOption: (option: string) => void\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n      options,\r\n      onChange, onChangeOption,\r\n      ...restProps\r\n    }\r\n) => {\r\n  const mappedOptions = options.map(o => <option>{o}</option>); // map options with key\r\n\r\n  const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n    onChangeOption(e.currentTarget.value)\r\n    // onChange, onChangeOption\r\n  }\r\n\r\n  return (\r\n      <select onChange={onChangeCallback} {...restProps}>\r\n        {mappedOptions}\r\n      </select>\r\n  );\r\n}\r\n\r\nexport default SuperSelect;\r\n","import React, {DetailedHTMLProps, InputHTMLAttributes} from 'react';\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n  options: Array<string>\r\n  onChangeOption: (option: string) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n      type, name,\r\n      options, value,\r\n      onChange, onChangeOption,\r\n      ...restProps\r\n    }\r\n) => {\r\n  const onChangeCallback = (valueButton: string) => {\r\n    onChangeOption(valueButton)\r\n    // onChange, onChangeOption\r\n  }\r\n  console.log(value)\r\n  const mappedOptions = options ? options.map((o, i) => ( // map options with key\r\n      <label key={name + '-' + i}>\r\n        <input\r\n            type={name}\r\n            onChange={() => onChangeCallback(o)}\r\n            checked={o === value}\r\n            value={value}\r\n            // name, checked, value, onChange\r\n        />\r\n        {o}\r\n      </label>\r\n  )) : [];\r\n\r\n  return (\r\n      <>\r\n        {mappedOptions}\r\n      </>\r\n  );\r\n}\r\n\r\nexport default SuperRadio;\r\n","import React, {useState} from 'react';\r\nimport SuperSelect from './common/c5-SuperSelect/SuperSelect';\r\nimport SuperRadio from './common/c6-SuperRadio/SuperRadio';\r\nimport s from './HW7.module.css'\r\n\r\nconst arr: Array<string> = ['x', 'y', 'z'];\r\n\r\nfunction HW7() {\r\n  const [value, onChangeOption] = useState<string>(arr[1]);\r\n  return (\r\n      <div className={s.root}>\r\n        <hr/>\r\n        homeworks 7\r\n\r\n        <div className={s.box}>\r\n          <SuperSelect\r\n              options={arr}\r\n              value={value}\r\n              onChangeOption={onChangeOption}\r\n          />\r\n        </div>\r\n        <div>\r\n          <SuperRadio\r\n              name={'radio'}\r\n              options={arr}\r\n              value={value}\r\n              onChangeOption={onChangeOption}\r\n          />\r\n        </div>\r\n\r\n        {/*<hr/>*/}\r\n        {/*для личного творчества, могу проверить*/}\r\n        {/*<AlternativeSuperSelect/>*/}\r\n        {/*<AlternativeSuperRadio/>*/}\r\n        {/*<hr/>*/}\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default HW7;\r\n","import React from 'react';\r\nimport s from './App.module.css';\r\nimport HW7 from '../../../p2-homeworks/h7/HW7';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className={s.App}>\r\n        <div>react homeworks:</div>\r\n        {/*<HW1/>*/}\r\n        {/*<HW2/>*/}\r\n        {/*<HW3/>*/}\r\n        {/*<HW4/>*/}\r\n        {/*<HW5/>*/}\r\n        {/*<HW6/>*/}\r\n        <HW7/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}